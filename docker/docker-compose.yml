version: "3.9"

services:
  postgres:
    image: postgres:${POSTGRES_VERSION}
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: ${TZ}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data
      - ./initdb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks: [ backend-net ]
    restart: unless-stopped

  ms-solicitudes:
    build: ../ms-solicitudes
    container_name: ms-solicitudes
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      APP_PORT: ${GESTION_SOLICITUDES_PORT}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASS: ${POSTGRES_PASSWORD}
    ports:
      - "${GESTION_SOLICITUDES_PORT}:${GESTION_SOLICITUDES_PORT}"
    networks: [ backend-net ]
    restart: unless-stopped

  ms-transportes:
    build: ../ms-transportes
    container_name: ms-transportes
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      SPRING_PROFILES_ACTIVE: docker
      APP_PORT: ${GESTION_RUTAS_PORT}
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB}
      DB_USER: ${POSTGRES_USER}
      DB_PASS: ${POSTGRES_PASSWORD}
    ports:
      - "${GESTION_RUTAS_PORT}:${GESTION_RUTAS_PORT}"
    networks: [ backend-net ]
    restart: unless-stopped

networks:
  backend-net:
    driver: bridge
